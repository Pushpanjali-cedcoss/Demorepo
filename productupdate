    public function updateProductandKeepLocation($productDatas, $sqsData)
    {
        $target = $this->di->getObjectManager()->get('\App\Shopifyhome\Components\Shop\Shop')->getUserMarkeplace();
        $helper = $this->di->getObjectManager()->get('\App\Shopifyhome\Components\Product\Helper');
        $productContainer = $this->di->getObjectManager()->create('\App\Connector\Models\ProductContainer');
        $handleUpdateData = $this->di->getObjectManager()->get('\App\Shopifyhome\Components\Product\Data');

        $variantIds = [];
        $containerId = '';
        $newProductFlag = false;

        try {
            foreach ($productDatas as $key => $productData){
                if($key == 0){
                    $coreData = $helper->formatCoreDataForDetail($productData);
                    $containerId = $coreData['source_product_id'];
                    $updateProductDetails = $handleUpdateData->updateWebhookProductDetails($coreData);

                    $this->di->getLog()->logContent('PROCESS 000002 | Import | updateProductandKeepLocation | updateProduct Details response  = '.json_encode($updateProductDetails),'info','shopify'.DS.$this->di->getUser()->id.DS.'product'.DS.date("Y-m-d").DS.'webhook_product_import.log');

                    if(!$updateProductDetails['success']){
                        $data['details'] = $helper->formatCoreDataForDetail($productData);
                        $data['variant_attribute'] = isset($productData['variant_attributes']) ? $productData['variant_attributes'] : [];
                        $data['variants'][] = $helper->formatCoreDataForVariantData($productData);
                        $productContainer->setSource("product_container_".$this->di->getUser()->id);
                        $res = $productContainer->createProductsAndAttributes([$data], Import::MARKETPLACE_CODE, 0, $this->di->getUser()->id);

                        $this->di->getLog()->logContent('PROCESS 000020 | Import | updateProductandKeepLocation | create new product response  = '.json_encode($res).' | Procduct Container : '.json_encode($productContainer->getSource()),'info','shopify'.DS.$this->di->getUser()->id.DS.'product'.DS.date("Y-m-d").DS.'webhook_product_import.log');
                        if($res[0]['success'] && $productData['quantity']==0){
                            $usr = $this->di->getObjectManager()->get('App\Core\Models\User\Details')->getDataByUserID($this->di->getUser()->id, $target);
                            //$this->di->getObjectManager()->get('\App\Shopifyhome\Components\Product\Inventory\Import')->getProductInventory([$productData['inventory_item_id']], $usr['remote_shop_id']);

                            if(isset($sqsData['user_id'])){
                                unset($sqsData['data']);
                                $sqsData['data']['inventory_item_id'] = $productData['inventory_item_id'];
                                $sqsData['data']['remote_shop_id'] = $usr['remote_shop_id'];
                                $sqsData['class_name'] = '\App\Shopifyhome\Components\Product\Hook';
                                $sqsData['method'] = 'forceGetProductInventory';
                                $sqsData['queue_name'] = 'facebook_webhook_inventory_update';
                                $sqsData['data']['container_id'] = $containerId;
                                $this->pushToQueue($sqsData);
                                $this->di->getLog()->logContent(json_encode($sqsData),'info','shopify'.DS.'global'.DS.date("Y-m-d").DS.'webhook_users_products_update_sqs.log');
                            } else {
                                $this->di->getLog()->logContent(json_encode($sqsData),'info','shopify'.DS.'global'.DS.date("Y-m-d").DS.'webhook_users_products_update_error_flag.log');
                            }
                        }
                        $newProductFlag = true;
                    } else {
                        if(isset($productData['variant_attributes'])){
                            $data['attributes'] = $productData['variant_attributes'];
                            $data['source_product_id'] = $containerId;
                            $handleUpdateData->updateWebhookProductVariants($data);
                        }
                    }
                }
                $productData = $helper->formatCoreDataForVariantData($productData);

                $openTime = microtime(true);

                $tempProductData = $helper->appendMissingWebhookDataFromContainer($productData);

                $endTime2 = microtime(true);
                $elapsedtIME = $endTime2 - $openTime;
//                $this->di->getLog()->logContent('Source product Id : '.$coreData['source_product_id']. ' | appendMissingWebhookDataFromContainer : '.$elapsedtIME. ' secs','info','shopify'.DS.$this->di->getUser()->id.DS.'product'.DS.date("Y-m-d").DS.'webhook_product_system.log');

                $openTime = microtime(true);

                $productData = $tempProductData['data'];
                $handleUpdateData->updateWebhookProducts($productData, $tempProductData['variantAgr'], $sqsData);

                $endTime = microtime(true);
                $elapsedtIME = $endTime - $openTime;
//                $this->di->getLog()->logContent('Source product Id : '.$coreData['source_product_id']. ' | updateWebhookProducts : '.$elapsedtIME. ' secs','info','shopify'.DS.$this->di->getUser()->id.DS.'product'.DS.date("Y-m-d").DS.'webhook_product_system.log');

                $variantIds[] = $productData['source_variant_id'];
            }
            $this->validateAndDeleteVariants($variantIds, $containerId);

        }catch (\Exception $e) {
            $flag=$this->di->getObjectManager()->get('\App\Shopifyhome\Components\Utility')->exceptionHandler($e->getMessage());
            if($flag){
                $this->di->getLog()->logContent('Retry Product Update Webhook while exception occurs'.json_encode($sqsData),'info','shopify'.DS.$this->di->getUser()->id.DS.'product'.DS.date("Y-m-d").DS.'exception_webhook_product_import.log');
                $runAfterTime= time() + 15*60;
                $this->pushToQueue($sqsData , $runAfterTime);
                return true;
            }else{
                $this->di->getLog()->logContent('Exception = '.$e->getMessage(),'info','shopify'.DS.$this->di->getUser()->id.DS.'product'.DS.date("Y-m-d").DS.'another_exception.log');
            }
        }

        if($newProductFlag) {

            $this->di->getLog()->logContent('PROCESS 000003 | Import | updateProductandKeepLocation | calling facebook to create product(s) | Procduct Container : '.json_encode($productContainer->getSource())." Con Id = ".json_encode($containerId),'info','shopify'.DS.$this->di->getUser()->id.DS.'product'.DS.date("Y-m-d").DS.'webhook_product_import.log');
            $this->di->getLog()->logContent(" Con Id = ".json_encode($containerId),'info','shopify'.DS.$this->di->getUser()->id.DS.'product'.DS.date("Y-m-d").DS.'webhook_product_import.log');

            $fbResponse = $this->di->getObjectManager()->get('\App\Facebookhome\Components\Helper')->createProducts(['selected_products' => [$containerId]]);

            $this->di->getLog()->logContent('PROCESS 000004 | Import | updateProductandKeepLocation | facebook response :'.json_encode($fbResponse),'info','shopify'.DS.$this->di->getUser()->id.DS.'product'.DS.date("Y-m-d").DS.'webhook_product_import.log');
        } else {
            $this->di->getLog()->logContent('PROCESS 000003 | Import | updateProductandKeepLocation | calling facebook to update product  | Procduct Container : '.json_encode($productContainer->getSource()),'info','shopify'.DS.$this->di->getUser()->id.DS.'product'.DS.date("Y-m-d").DS.'webhook_product_import.log');

            $fbResponse = $this->di->getObjectManager()->get('\App\Facebookhome\Components\Helper')->updateProducts(['selected_products' => [$containerId]]);

            $this->di->getLog()->logContent('PROCESS 000004 | Import | updateProductandKeepLocation |  facebook response : '.json_encode($fbResponse),'info','shopify'.DS.$this->di->getUser()->id.DS.'product'.DS.date("Y-m-d").DS.'webhook_product_import.log');
        }
        return true;
    }
